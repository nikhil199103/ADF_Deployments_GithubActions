name: ADF Deployment

on:
  push:
    branches:
      - adf_publish
  workflow_dispatch:
    inputs:
      skipAzModuleInstallation:
        description: 'Skip the installation of Az PowerShell module'
        required: false
        default: 'false'

jobs:
  deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        stage: ['test']
      fail-fast: true
      max-parallel: 1
    environment:
      name: ${{ matrix.stage }}

    steps:
      # Step 1: Checkout the adf_publish branch
      - name: Checkout Target Branch (adf_publish)
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: adf_publish

      # Step 2: Fetch scripts from main branch
      - name: Fetch Scripts from Main Branch
        run: |
          git fetch origin main

          # Copy scripts to temp directory
          mkdir -p temp
          git show origin/main:PrePostDeploymentScript.ps1 > temp/PrePostDeploymentScript.ps1
          git show origin/main:GetADFTriggerState.ps1 > temp/GetADFTriggerState.ps1

          # Switch back to adf_publish branch
          git checkout adf_publish

          # Verify script location
          ls -l temp

      # Step 3: Debug Directory Structure
      - name: Debug Directory Structure
        run: |
          echo "Current directory:"
          pwd
          echo "Listing files:"
          ls -R

      # Step 4: Install Az PowerShell module conditionally
      - name: Install Az PowerShell module
        if: inputs.skipAzModuleInstallation != 'true'
        run: |
          Install-Module -Name Az -Scope CurrentUser -Repository PSGallery -Force
        shell: pwsh

      # Step 5: Azure Login
      - name: Azure Login
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      # Step 6: Upload Linked Templates to Storage Account
      - name: Upload Linked Templates to Azure Storage
        run: |
          echo "Uploading linked templates to Azure Storage Account"

          # Variables
          STORAGE_ACCOUNT_NAME="adftempaltedeploy"
          CONTAINER_NAME="templates"
          FILE_PATH="./adf-github-actions/linkedTemplates/"
          
          # Ensure container exists
          az storage container create --name $CONTAINER_NAME --account-name $STORAGE_ACCOUNT_NAME
          
          # Upload templates
          for file in $FILE_PATH*.json; do
            az storage blob upload --account-name $STORAGE_ACCOUNT_NAME --container-name $CONTAINER_NAME --file "$file" --name "$(basename $file)"
          done
          
          echo "Templates uploaded successfully"

      # Step 7: Generate SAS Token for Templates
      - name: Generate SAS Token
        id: sas
        run: |
          echo "Generating SAS URL with 1-hour validity"

          # Generate SAS token
          END_DATE=$(date -u -d "1 hour" '+%Y-%m-%dT%H:%MZ')
          SAS_TOKEN=$(az storage container generate-sas --account-name $STORAGE_ACCOUNT_NAME --name $CONTAINER_NAME --permissions lr --expiry $END_DATE --output tsv)
          TEMPLATE_BASE_URL="https://${STORAGE_ACCOUNT_NAME}.blob.core.windows.net/${CONTAINER_NAME}"
          
          echo "SAS_TOKEN=$SAS_TOKEN" >> $GITHUB_ENV
          echo "TEMPLATE_BASE_URL=$TEMPLATE_BASE_URL" >> $GITHUB_ENV
          
          echo "Generated SAS Token and Base URL"

      # Step 8: Get list of Triggers
      - name: List ADF Triggers
        run: |
          pwsh -command "./temp/GetADFTriggerState.ps1 -ResourceGroupName test -DataFactoryName adf-github-actions-test"
        shell: pwsh

      # Step 9: Run Pre-deployment script
      - name: Run Pre-deployment script with Linked ARM Template
        run: |
          pwsh -command "./temp/PrePostDeploymentScript.ps1 -armTemplate [concat('${{ env.TEMPLATE_BASE_URL }}', '/preDeploymentTemplate.json', '${{ env.SAS_TOKEN }}')] -ResourceGroupName test -DataFactoryName adf-github-actions-test -predeployment $true -deleteDeployment $false"
        shell: pwsh

      # Step 10: Deploy ADF ARM Templates
      - name: Deploy ADF ARM Templates
        uses: Azure/arm-deploy@v1
        with:
          resourceGroupName: test
          template: ${{ env.TEMPLATE_BASE_URL }}/mainTemplate.json?${{ env.SAS_TOKEN }}
          parameters: |
            factoryName=adf-github-actions-test
            linkedTemplateBaseUrl=${{ env.TEMPLATE_BASE_URL }}
            linkedTemplateSasToken=${{ env.SAS_TOKEN }}
          deploymentMode: Incremental

      # Step 11: Run Post-deployment script
      - name: Run Post-deployment script with Linked ARM Template
        run: |
          pwsh -command "./temp/PrePostDeploymentScript.ps1 -armTemplate [concat('${{ env.TEMPLATE_BASE_URL }}', '/postDeploymentTemplate.json', '${{ env.SAS_TOKEN }}')] -ResourceGroupName test -DataFactoryName adf-github-actions-test -predeployment $false -deleteDeployment $true"
        shell: pwsh