name: ADF Deployment

on:
  push:
    branches:
      - adf_publish
  workflow_dispatch:
    inputs:
      skipAzModuleInstallation:
        description: 'Skip the installation of Az PowerShell module'
        required: false
        default: 'false'

jobs:
  deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        stage: ['test']
      fail-fast: true
      max-parallel: 1
    environment:
      name: ${{ matrix.stage }}

    steps:
      # Step 1: Checkout Target Branch
      - name: Checkout Target Branch (adf_publish)
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: adf_publish

      # Step 2: Fetch Scripts from Main Branch
      - name: Fetch Scripts from Main Branch
        run: |
          git fetch origin main
          mkdir -p temp
          git show origin/main:PrePostDeploymentScript.ps1 > temp/PrePostDeploymentScript.ps1
          git show origin/main:StgSASToken.ps1 > temp/StgSASToken.ps1
          git checkout adf_publish
          ls -l temp

      # Step 3: Install Az PowerShell Module Conditionally
      - name: Install Az PowerShell Module
        if: inputs.skipAzModuleInstallation != 'true'
        run: |
          Install-Module -Name Az -Scope CurrentUser -Repository PSGallery -Force
        shell: pwsh

      # Step 4: Azure Login
      - name: Azure Login
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      # Step 5: Upload Linked Templates to Azure Storage
      - name: Upload Linked Templates to Azure Storage
        run: |
          echo "Uploading ARM templates to Azure Storage"
          az storage container create --name templates --account-name adftempaltedeploy --auth-mode login
          for file in ./adf-github-actions/linkedTemplates/*.json; do
            az storage blob upload --account-name adftempaltedeploy --container-name templates --file "$file" --name "$(basename $file)" --overwrite
          done

      # Step 6: Generate SAS Token and Container URI
      - name: Generate SAS Token and Container URI
        id: generate_sas
        shell: pwsh
        run: |
          $ctx = (Get-AzStorageAccount -ResourceGroupName test -AccountName adftempaltedeploy).Context
          $StartTime = Get-Date
          $EndTime = $StartTime.AddHours(1)

          Write-Host "Start Time: $StartTime"
          Write-Host "End Time: $EndTime"

          $containerSasToken = New-AzStorageAccountSASToken -Context $ctx -Service Blob,File,Table,Queue -ResourceType Service,Container,Object -Permission "racwdlup" -Protocol "HttpsOnly" -StartTime $StartTime -ExpiryTime $EndTime
          $containerUri = "https://adftempaltedeploy.blob.core.windows.net/templates"

          if (-not $containerSasToken) {
            Write-Error "Failed to generate SAS Token!"
            exit 1
          }

          Write-Host "Generated SAS Token: $containerSasToken"
          Write-Host "Container URI: $containerUri"

          echo "containerSasToken=$containerSasToken" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "containerUri=$containerUri" | Out-File -FilePath $env:GITHUB_ENV -Append

      # Step 7: Debug Environment Variables
      - name: Debug Environment Variables
        run: |
          echo "Container URI: ${{ env.containerUri }}"
          echo "Container SAS Token: ${{ env.containerSasToken }}"

      # Step 8: Validate Deployment
      - name: Validate Deployment
        run: |
          az deployment group validate \
            --resource-group test \
            --template-uri "${{ env.containerUri }}/ArmTemplate_master.json?${{ env.containerSasToken }}" \
            --parameters "{\"factoryName\": {\"value\": \"adf-github-actions-test\"}, \"containerUri\": {\"value\": \"${{ env.containerUri }}\"}, \"containerSasToken\": {\"value\": \"?${{ env.containerSasToken }}\"}}"

      # Step 9: Deploy ADF ARM Templates
      - name: Deploy ADF ARM Templates
        uses: Azure/arm-deploy@v1
        with:
          resourceGroupName: test
          template: ${{ env.containerUri }}/ArmTemplate_master.json?${{ env.containerSasToken }}
          parameters: |
            factoryName=adf-github-actions-test
            containerUri=${{ env.containerUri }}
            containerSasToken="?${{ env.containerSasToken }}"
          deploymentMode: Incremental

      # Step 10: Run Post-deployment Script
      - name: Run Post-deployment Script
        shell: pwsh
        run: |
          pwsh -command "./temp/PrePostDeploymentScript.ps1 -armTemplate '${{ env.containerUri }}/ArmTemplate_master.json?${{ env.containerSasToken }}' -ResourceGroupName test -DataFactoryName adf-github-actions-test -predeployment $false -deleteDeployment $true"