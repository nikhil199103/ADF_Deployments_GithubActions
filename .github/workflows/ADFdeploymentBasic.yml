name: ADF Deployment

on:
  push:
    branches:
      - adf_publish
  workflow_dispatch:
    inputs:
      skipAzModuleInstallation:
        description: 'Skip the installation of Az PowerShell module'
        required: false
        default: 'false'

permissions:
  contents: read
  actions: write  # Allows managing secrets

jobs:
  deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        stage: ['test']
      fail-fast: true
      max-parallel: 1
    environment:
      name: ${{ matrix.stage }}

    steps:
      # Step 1: Checkout Target Branch
      - name: Checkout Target Branch (adf_publish)
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: adf_publish

      # Step 2: Fetch Scripts from Main Branch
      - name: Fetch Scripts from Main Branch
        run: |
          git fetch origin main
          mkdir -p temp
          git show origin/main:PrePostDeploymentScript.ps1 > temp/PrePostDeploymentScript.ps1
          git show origin/main:StgSASToken.ps1 > temp/StgSASToken.ps1
          git checkout adf_publish
          ls -l temp

      # Step 3: Install Az PowerShell Module Conditionally
      - name: Install Az PowerShell Module
        if: ${{ inputs.skipAzModuleInstallation != 'true' }}
        run: |
          Install-Module -Name Az -Scope CurrentUser -Repository PSGallery -Force
        shell: pwsh

      # Step 4: Azure Login
      - name: Azure Login
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      # Step 5: Upload Linked Templates to Azure Storage
      - name: Upload Linked Templates to Azure Storage
        run: |
          echo "Uploading ARM templates to Azure Storage"
          az storage container create --name templates --account-name adftempaltedeploy --auth-mode login
          for file in ./adf-github-actions/linkedTemplates/*.json; do
            az storage blob upload --account-name adftempaltedeploy --container-name templates --file "$file" --name "$(basename "$file")" --overwrite
          done
        shell: bash

      # Step 6: Generate SAS Token and Container URI
      - name: Generate SAS Token and Container URI
        id: generate_sas
        shell: pwsh
        run: |
          try {
            # Generate SAS Token and Container URI
            $ctx = (Get-AzStorageAccount -ResourceGroupName test -AccountName adftempaltedeploy).Context
            $StartTime = Get-Date
            $EndTime = $StartTime.AddHours(1)

            Write-Host "Start Time: $StartTime"
            Write-Host "End Time: $EndTime"

            $containerSasToken = New-AzStorageAccountSASToken -Context $ctx -Service Blob -ResourceType Service,Container,Object -Permission "racwdlup" -Protocol "HttpsOnly" -StartTime $StartTime -ExpiryTime $EndTime
            $containerUri = "https://adftempaltedeploy.blob.core.windows.net/templates"

            if (-not $containerSasToken -or -not $containerUri) {
              Write-Error "Failed to generate SAS Token or Container URI!"
              exit 1
            }

            Write-Host "Generated SAS Token: $containerSasToken"
            Write-Host "Generated Container URI: $containerUri"

            # Define the repository name
            $REPO = "owner/repo"  # Replace with your actual repository name

            # Fetch the public key for the repository
            $publicKeyResponse = Invoke-RestMethod -Uri "https://api.github.com/repos/$REPO/actions/secrets/public-key" `
              -Headers @{ Authorization = "token $env:GITHUB_TOKEN" } -Method Get

            $publicKey = $publicKeyResponse.key
            $keyId = $publicKeyResponse.key_id

            if (-not $publicKey -or -not $keyId) {
              Write-Error "Failed to retrieve the public key from GitHub!"
              exit 1
            }

            # Function to encrypt a secret using the public key
            function Encrypt-Secret($secret, $publicKey) {
              $bytes = [System.Text.Encoding]::UTF8.GetBytes($secret)
              $publicKeyBytes = [Convert]::FromBase64String($publicKey)
              $rsa = [System.Security.Cryptography.RSACryptoServiceProvider]::new()
              $rsa.ImportSubjectPublicKeyInfo($publicKeyBytes, [ref]0)
              $encryptedBytes = $rsa.Encrypt($bytes, $true)
              return [Convert]::ToBase64String($encryptedBytes)
            }

            # Encrypt the SAS Token
            $encryptedSasToken = Encrypt-Secret $containerSasToken $publicKey

            # Store the encrypted SAS Token as a secret
            Invoke-RestMethod -Uri "https://api.github.com/repos/$REPO/actions/secrets/containerSasToken" `
              -Headers @{ Authorization = "token $env:GITHUB_TOKEN" } -Method Put -ContentType "application/json" `
              -Body (@{
                encrypted_value = $encryptedSasToken
                key_id = $keyId
              } | ConvertTo-Json)

            # Encrypt the Container URI
            $encryptedContainerUri = Encrypt-Secret $containerUri $publicKey

            # Store the encrypted Container URI as a secret
            Invoke-RestMethod -Uri "https://api.github.com/repos/$REPO/actions/secrets/containerUri" `
              -Headers @{ Authorization = "token $env:GITHUB_TOKEN" } -Method Put -ContentType "application/json" `
              -Body (@{
                encrypted_value = $encryptedContainerUri
                key_id = $keyId
              } | ConvertTo-Json)

            Write-Host "SAS Token and Container URI successfully stored in GitHub Secrets."
          } catch {
            Write-Error "Error occurred during SAS Token and Container URI storage: $_"
            exit 1
          }

      # Step 7: Retrieve Secrets for Deployment
      - name: Use Stored Secrets
        run: |
          echo "Pulling SAS Token and Container URI from GitHub Secrets..."
          SAS_TOKEN="${{ secrets.containerSasToken }}"
          CONTAINER_URI="${{ secrets.containerUri }}"

          echo "Container URI: $CONTAINER_URI"
          echo "Container SAS Token: $SAS_TOKEN"
        shell: bash

      # Step 8: Deploy ADF ARM Templates
      - name: Deploy ADF ARM Templates
        uses: Azure/arm-deploy@v1
        with:
          resourceGroupName: test
          template: ${{ secrets.containerUri }}/ArmTemplate_master.json?${{ secrets.containerSasToken }}
          parameters: |
            {
              "factoryName": {
                "value": "adf-github-actions-test"
              },
              "containerUri": {
                "value": "${{ secrets.containerUri }}"
              },
              "containerSasToken": {
                "value": "?${{ secrets.containerSasToken }}"
              }
            }
          deploymentMode: Incremental
          failOnStdErr: true

      # Step 9: Run Post-deployment Script
      - name: Run Post-deployment Script
        shell: pwsh
        run: |
          ./temp/PrePostDeploymentScript.ps1 -armTemplate "${{ secrets.containerUri }}/ArmTemplate_master.json?${{ secrets.containerSasToken }}" -ResourceGroupName test -DataFactoryName adf-github-actions-test -predeployment $false -deleteDeployment $true