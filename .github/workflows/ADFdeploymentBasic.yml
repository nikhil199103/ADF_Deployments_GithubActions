name: ADF Deployment

on:
  push:
    branches:
      - adf_publish
  workflow_dispatch:
    inputs:
      skipAzModuleInstallation:
        description: 'Skip the installation of Az PowerShell module'
        required: false
        default: 'false'

jobs:
  deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        stage: ['test']
      fail-fast: true
      max-parallel: 1
    environment:
      name: ${{ matrix.stage }}

    steps:
      # Step 1: Set Variables
      - name: Set Variables
        run: |
          echo "Setting up required environment variables"
          echo "RESOURCE_GROUP_NAME=adftempaltedeploy" >> $GITHUB_ENV
          echo "STG_ACCOUNT_NAME=templates" >> $GITHUB_ENV
          echo "CONTAINER_NAME=templates" >> $GITHUB_ENV
          echo "FILE_PATH=./adf-github-actions/linkedTemplates/" >> $GITHUB_ENV

      # Step 2: Checkout the adf_publish branch
      - name: Checkout Target Branch (adf_publish)
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: adf_publish

      # Step 3: Fetch scripts from main branch
      - name: Fetch Scripts from Main Branch
        run: |
          git fetch origin main

          # Copy scripts to temp directory
          mkdir -p temp
          git show origin/main:PrePostDeploymentScript.ps1 > temp/PrePostDeploymentScript.ps1
          git show origin/main:GetADFTriggerState.ps1 > temp/GetADFTriggerState.ps1
          git show origin/main:StgSASToken.ps1 > temp/StgSASToken.ps1

          # Switch back to adf_publish branch
          git checkout adf_publish

          # Verify script location
          ls -l temp

      # Step 4: Debug Directory Structure
      - name: Debug Directory Structure
        run: |
          echo "Current directory:"
          pwd
          echo "Listing files:"
          ls -R

      # Step 5: Install Az PowerShell module conditionally
      - name: Install Az PowerShell module
        if: inputs.skipAzModuleInstallation != 'true'
        run: |
          Install-Module -Name Az -Scope CurrentUser -Repository PSGallery -Force
        shell: pwsh

      # Step 6: Azure Login
      - name: Azure Login
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      # Step 7: Upload Linked Templates to Azure Storage
      - name: Upload Linked Templates to Azure Storage
        run: |
          az storage container create --name $CONTAINER_NAME --account-name $STG_ACCOUNT_NAME --auth-mode login
          for file in $FILE_PATH*.json; do
            az storage blob upload --account-name $STG_ACCOUNT_NAME --container-name $CONTAINER_NAME --file "$file" --name "$(basename $file)" --overwrite
          done

      # Step 8: Generate SAS Token with StgSASToken.ps1
      - name: Generate SAS Token
        id: generate_sas
        run: |
          # Run the StgSASToken.ps1 script to generate the SAS token
          $sasToken = pwsh -command "./temp/StgSASToken.ps1 -ResourceGroupName $env:RESOURCE_GROUP_NAME -StgAccName $env:STG_ACCOUNT_NAME"

          # Extract the SAS token from the script's output
          echo "SAS_TOKEN=$sasToken" >> $GITHUB_ENV
          echo "TEMPLATE_BASE_URL=https://${{ env.STG_ACCOUNT_NAME }}.blob.core.windows.net/${{ env.CONTAINER_NAME }}" >> $GITHUB_ENV
        shell: pwsh

      # Step 9: Run Pre-deployment script
      - name: Run Pre-deployment script
        run: |
          pwsh -command "./temp/PrePostDeploymentScript.ps1 -armTemplate '${{ env.TEMPLATE_BASE_URL }}/ArmTemplate_master.json?${{ env.SAS_TOKEN }}' -ResourceGroupName ${{ env.RESOURCE_GROUP_NAME }} -DataFactoryName adf-github-actions-test -predeployment $true -deleteDeployment $false"
        shell: pwsh

      # Step 10: Deploy ADF ARM Templates
      - name: Deploy ADF ARM Templates
        uses: Azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.RESOURCE_GROUP_NAME }}
          template: ${{ env.TEMPLATE_BASE_URL }}/ArmTemplate_master.json?${{ env.SAS_TOKEN }}
          parameters: |
            factoryName=adf-github-actions-test
            linkedTemplateBaseUrl=${{ env.TEMPLATE_BASE_URL }}
            linkedTemplateSasToken=${{ env.SAS_TOKEN }}
          deploymentMode: Incremental

      # Step 11: Run Post-deployment script
      - name: Run Post-deployment script
        run: |
          pwsh -command "./temp/PrePostDeploymentScript.ps1 -armTemplate '${{ env.TEMPLATE_BASE_URL }}/ArmTemplate_master.json?${{ env.SAS_TOKEN }}' -ResourceGroupName ${{ env.RESOURCE_GROUP_NAME }} -DataFactoryName adf-github-actions-test -predeployment $false -deleteDeployment $true"
        shell: pwsh